class BalooPow{constructor(t,n,e,o=!0){this.workers=[],this.challenge=e,this.difficulty=n,this.publicSalt=t,this.navigatorData=this.cloneObject(navigator,0),this.numeric=o,this.workerScript='\n\n        import init, { find_solution } from \'https://cdn.jsdelivr.net/gh/41Baloo/balooPow@main/wasm/baloo_pow/pkg/baloo_pow.js\'\n\n        self.onmessage = async function(e) {\n\n            function compareObj(obj1, obj2, iteration) {\n                if (iteration > 4) {\n                    return "";\n                }\n                for (let key in obj1) {\n                    if (key == "rtt") {\n                        return "";\n                    }\n                    if (typeof obj1[key] === "function") {\n                        return "";\n                    }\n                    if (typeof obj1[key] === "object" && obj1[key] !== null) {\n                        return compareObj(obj1[key], obj2[key], iteration + 1)\n                    } else {\n                        if (obj1[key] !== obj2[key]) {\n                            return key+", ";\n                        }\n                    }\n                }\n                return "";\n            }\n\n            await init(\'https://cdn.jsdelivr.net/gh/41Baloo/balooPow@main/wasm/baloo_pow/pkg/baloo_pow_bg.wasm\');\n\n            const {\n                publicSalt,\n                challenge,\n                start,\n                end,\n                numeric,\n                difficulty,\n                clientNavigator\n            } = e.data;\n\n            const result = find_solution(publicSalt, challenge, start, end, numeric, difficulty);\n            result.match = compareObj(navigator, clientNavigator, 0),\n            self.postMessage(result);\n            self.close();\n        };\n        '}cloneObject(t,n){var e={};if(n>4)return e;for(var o in t)"object"!=typeof t[o]||null==t[o]||t[o]instanceof Function?"function"==typeof t[o]||t[o]instanceof HTMLElement||(e[o]=t[o]):e[o]=this.cloneObject(t[o],n+1);return e}spawnWorker(t,n,e,o,i){const a=new Worker(t,{type:"module"});this.workers.push(a),a.onmessage=t=>{const n=t.data;""!=n.match&&null==navigator.brave||""===n.solution?(console.log("worker failed.. Match: ",n.match),i("No solution found")):(console.log("terminating all workers"),this.workers.forEach((t=>{t.terminate()})),o(n))},a.postMessage({challenge:this.challenge,publicSalt:this.publicSalt,start:n,end:e,numeric:this.numeric,difficulty:this.difficulty,clientNavigator:this.navigatorData})}async delay(t){return new Promise((n=>setTimeout(n,t)))}async Solve(){let t=navigator.hardwareConcurrency||2;t=Math.min(t,16),console.log(`${t} threads`);const n=this.numeric?Math.ceil(this.difficulty/t):Math.ceil(Math.pow(16,this.difficulty)/t),e=[],o=new Blob([this.workerScript],{type:"text/javascript"}),i=URL.createObjectURL(o);await this.delay(2400);for(let t=0;t<(this.numeric?this.difficulty:Math.pow(16,this.difficulty));t+=n)e.push(new Promise(((e,o)=>{this.spawnWorker(i,t,Math.min(t+n-1,this.numeric?this.difficulty-1:Math.pow(16,this.difficulty)-1),e,o)})));try{const t=new Date,n=await Promise.any(e),o=new Date;return console.log("Solved",n),console.log("Solved In:",(o.getTime()-t.getTime())/1e3),n}catch(t){return console.log("e ",t),null}}}
